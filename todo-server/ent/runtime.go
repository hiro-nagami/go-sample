// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/schema"
	"app/ent/todo"
	"app/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	todoFields := schema.Todo{}.Fields()
	_ = todoFields
	// todoDescTitle is the schema descriptor for title field.
	todoDescTitle := todoFields[1].Descriptor()
	// todo.DefaultTitle holds the default value on creation for the title field.
	todo.DefaultTitle = todoDescTitle.Default.(string)
	// todoDescDone is the schema descriptor for done field.
	todoDescDone := todoFields[2].Descriptor()
	// todo.DefaultDone holds the default value on creation for the done field.
	todo.DefaultDone = todoDescDone.Default.(bool)
	// todoDescID is the schema descriptor for id field.
	todoDescID := todoFields[0].Descriptor()
	// todo.IDValidator is a validator for the "id" field. It is called by the builders before save.
	todo.IDValidator = todoDescID.Validators[0].(func(int) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescSex is the schema descriptor for sex field.
	userDescSex := userFields[2].Descriptor()
	// user.DefaultSex holds the default value on creation for the sex field.
	user.DefaultSex = userDescSex.Default.(int)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(int) error)
}
